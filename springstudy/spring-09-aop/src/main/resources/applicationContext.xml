<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 使用Spring来创建对象，在spring这些都称为Bean

     类型 变量名 = new 类型();
     Hello hello = new Hello();

     id = 变量名;
     class = new 的对象;
     property 相当于给对象中的属性设置一个值！
     -->
    <!--    <bean id="cat" class="com.kuang.pojo.Cat"/>-->
    <!--    <bean id="dog" class="com.kuang.pojo.Dog"/>-->

    <!--    <bean id="people" class="com.kuang.pojo.People">-->
    <!--        <property name="name" value="刘德华"/>-->
    <!--        <property name="dog" ref="dog"/>-->
    <!--        <property name="cat" ref="cat"/>-->
    <!--    </bean>-->

    <!--开启注解支持-->
    <context:annotation-config/>


    <!--注册bean
    1、它注册了,就相当于声明了某个类实例化了,你就不需要再在程序里实例化这个类了,直接用就可以了
    2、几乎Java中的所有框架都需要通过配置文件读取，注册之后程序运行时就直接读取配置去找类和方法，
       而不是之前那种一个类一个类导入的方式
    -->
    <bean id="UserService" class="com.kuang.service.UserServiceImpl"/>
    <bean id="log" class="com.kuang.log.Log"/>
    <bean id="afterLog" class="com.kuang.log.AfterLog"/>

<!--
    &lt;!&ndash;方式一：使用原生的Spring API接口&ndash;&gt;
    &lt;!&ndash;配置aop: 需要导入aop的约束&ndash;&gt;
    <aop:config>
        &lt;!&ndash;切入点: expression：表达式&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>
-->

    <!--方式二：自定义类实现aop-->
    <bean id="diy" class="com.kuang.diy.DiyPointCut"/>
    <aop:config>
        <!--自定义切面，ref要引入的类-->
        <aop:aspect ref="diy">
            <!--切入点-->
            <aop:pointcut id="point" expression="execution(* com.kuang.service.UserServiceImpl.*(..))"/>
            <!--通知-->
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>

        </aop:aspect>
    </aop:config>


<!--    &lt;!&ndash;方式三：&ndash;&gt;
    <bean id="annotationPointCut" class="com.kuang.diy.AnnotationPointCut"/>-->
    <!--开启注解支持-->
    <aop:aspectj-autoproxy/>

</beans>